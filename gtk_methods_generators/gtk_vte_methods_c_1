/*vte ruby class*/
#include "gtk_vte_methods.h"
#include "fonts.h"
static void close_tab_on_exit(GtkWidget * vte, gint status, backbone_t * backbone)
{
  gint current = gtk_notebook_get_current_page (GTK_NOTEBOOK(backbone->window.notebook));
  if (gtk_notebook_get_n_pages (GTK_NOTEBOOK(backbone->window.notebook)) > 1)
  {
    gtk_notebook_remove_page (GTK_NOTEBOOK(backbone->window.notebook), current );
    gtk_widget_grab_focus(
      gtk_notebook_get_nth_page(GTK_NOTEBOOK(backbone->window.notebook),
       gtk_notebook_get_current_page(GTK_NOTEBOOK(backbone->window.notebook))));
  
  }
  else
  {
    quit_gracefully(backbone);
  }
  SENTINEL("%d", status);  
}
static gchar* get_pid_dir(GPid pid)
{
  gchar* file = g_strdup_printf("/proc/%d/cwd", pid);
  gchar* link = g_file_read_link(file, NULL);
  g_free(file);
  return link;
}

static void c_vte_struct_free(vte_t *c)
{
  if(c)
  {
    //if(c->vte) {g_string_free(c->vte, TRUE);}
    ruby_xfree(c);
  }
}
static VALUE c_vte_struct_alloc( VALUE klass)
{
  return Data_Wrap_Struct(klass, NULL, c_vte_struct_free, ruby_xmalloc(sizeof(vte_t)));
}
static VALUE c_vte_initialize(VALUE self, VALUE command)
{
  vte_t *v;
  Data_Get_Struct(self, vte_t, v);
  if(command != Qnil && TYPE(command) != T_STRING)
    rb_raise(rb_eTypeError, "Expected a string");

  char **argvp=0;
  int argc;
  v->working_directory = NULL;
   
  v->command = command != Qnil ? command : rb_str_new2(g_getenv("SHELL"));
  if(g_shell_parse_argv(RSTRING_PTR(v->command), &argc, &argvp,0) != TRUE )
    g_shell_parse_argv(g_getenv("SHELL"), &argc, &argvp,0);
  GError *error = NULL;
  v->vte = vte_terminal_new();
  if( !vte_terminal_spawn_sync( VTE_TERMINAL(v->vte),
                                  VTE_PTY_DEFAULT,
                                  v->working_directory,
                                  argvp,
                                  NULL,
                                  G_SPAWN_SEARCH_PATH,
                                  NULL,
                                  NULL,
                                  &(v->pid),
                                  NULL,
                                  &error))
  {
    LOG_ERR("%s\\n", error->message);
    g_strfreev(argvp);
    /*TODO make a clean exit*/
    rb_raise(rb_eTypeError, "Unable to create a vte terminal");
  }
  g_strfreev(argvp);

  g_signal_connect(v->vte, "child-exited", G_CALLBACK(close_tab_on_exit), &backbone);

  int index = gtk_notebook_append_page(GTK_NOTEBOOK(backbone.window.notebook), v->vte, NULL);
  gtk_notebook_set_tab_reorderable( GTK_NOTEBOOK(backbone.window.notebook),
                                    v->vte, 
                                    TRUE);
  gtk_widget_show_all(backbone.window.notebook);
  gtk_notebook_set_current_page(GTK_NOTEBOOK(backbone.window.notebook), index);
  gtk_widget_grab_focus(v->vte);
  return self;
}
